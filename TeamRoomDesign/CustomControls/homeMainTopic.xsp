<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core"
    xmlns:xc="http://www.ibm.com/xsp/custom"
    xmlns:xe="http://www.ibm.com/xsp/coreex" enableModifiedFlag="true"
    modifiedControl="btnSilentSave">

    <!--
    XPiNC: custom save handler invoked when a user tries to close the notes client
    or the application tab and clicks on "Save" in the action dialog, or does a
    Ctrl+S keystroke, or Esc key...
    -->
    <xp:button value="Silent Save" id="btnSilentSave" rendered="false">
        <xp:eventHandler event="onclick" submit="true"
            refreshMode="partial" refreshId="dynamicContent">
            <xp:this.action>
                <![CDATA[#{javascript:
                    if((userBean.accessLevel >= lotus.domino.ACL.LEVEL_AUTHOR) && userBean.canCreateDocs){
                        if(viewScope.containsKey("document1")){
                            // try to save datasources...
                            if(view.save(false)){
                                // only close process if not a Ctrl+S keystroke...
                                var sv = context.getSubmittedValue();
                                if(null != sv && sv != "$$xsp:file-save$$"){
                                    // allow the current tab or window to close...
                                    facesContext.closeProcess(
                                        com.ibm.xsp.context.FacesContextEx.CLOSE_VALIDATION_RESULT,
                                        true
                                    );
                                }
                            }
                        }
                    }
                }]]>
            </xp:this.action>
        </xp:eventHandler>
    </xp:button>

    <xp:this.data>
        <xp:dominoDocument var="document1" formName="MainTopic"
            ignoreRequestParams="true" computeWithForm="onsave"
            documentId="#{compositeData.documentId}"
            action="#{javascript:(null != compositeData.documentId)? 'editDocument' : 'newDocument'}">
        </xp:dominoDocument>
    </xp:this.data>
    <xp:this.beforePageLoad><![CDATA[#{javascript://
        // Initialize viewScope.controlDocType
        // (note, for custom docTypes the value is "Discussion" instead
        //  of the custom docType string.)
        
        var docType = null;
        
        // read existing docType from the document
        var docTypeVector = document1.getItemValue('DocType');
        if( docTypeVector && !docTypeVector.isEmpty() ){
            docType = docTypeVector.get(0);
        }
        
        // handle new doc being specified as a meeting in advance 
        if (! docType && isMeeting(param.docType)) {
            docType = param.docType;
        }
        
        if( ! docType ){ 
            // Get the default document
            docType = @DbColumn(@DbName(), "MissionLookup", 5);
            if(!docType){
                // Default to the "Discussion" document type
                docType = strings.defaultdoctype1;
            }
            else{
                // Use the first document type
                docType = docType[0];
            }
        }
        
        // convert any non-default doctype to "Discussion", because the discussion
        // fields are used for custom doctypes
        if (isDiscussion(docType)){ 
        	docType = strings.defaultdoctype1;
        }else if(isActionItem(docType)) {
        	docType = strings.defaultdoctype2;
        }else if(isMeeting(docType)) {
        	docType = strings.defaultdoctype3;
        }else if(isReference(docType) ){
            docType = strings.defaultdoctype4;
        }else{
        	docType = strings.defaultdoctype1;
        }
        
        // Put the newly selected value into the view scope
        viewScope.controlDocType = docType;
    }]]>
    </xp:this.beforePageLoad>

    <xp:this.afterPageLoad><![CDATA[#{javascript:viewScope.document1 = document1;

if (param.date != null) {   
    // user creating a meeting entry that is not for today
    var mtgDate;
    var sDate = param.date;
    try {
        var sdf:java.text.SimpleDateFormat = new java.text.SimpleDateFormat("yyyyMMdd");
        var mtgDate = sdf.parse(sDate);
        document1.setValue("MtgDate",mtgDate);
        } catch (e) { 
            // let the default value | bindings handle it
        }
    if (param.documentId != null) {
        // rescheduling an existing entry - need to update default date/times
        try {
        var startDate = document1.getItemValue("StartDateTime");
        if (startDate instanceof java.util.Vector) {
            if (startDate.size() > 0) {
                var datetime = startDate.get(0);
                if (datetime != null) {
                    var javadatetime = datetime.toJavaDate();
                    var yyyy = sDate.substring(0,4);
                    var mm = sDate.substring(4,6);
                    var dd = sDate.substring(6,8);
                    var hours = javadatetime.getHours();
                    var mins = javadatetime.getMinutes();
                    //print("SDT=" + yyyy + mm + dd + hours + mins);
                    document1.setValue("StartDateTime",@Time(yyyy, mm, dd, hours, mins,0));
                    document1.setValue("MtgTime",@Time(yyyy, mm, dd, hours, mins,0));
                    startDate = document1.getItemValue("EndDateTime");
                    if (startDate instanceof java.util.Vector) {
                        if (startDate.size() > 0) {
                            datetime = startDate.get(0);
                            if (datetime != null) {
                                javadatetime = datetime.toJavaDate();
                                hours = javadatetime.getHours();
                                mins = javadatetime.getMinutes();
                                //print("EDT=" + yyyy + mm + dd + hours + mins);
                                document1.setValue("EndDateTime",@Time(yyyy, mm, dd, hours,mins,0));
                            }
                        }
                    }
                }
            }
        }
        } catch (e) {}
    }   
}}]]></xp:this.afterPageLoad>

    <xp:label id="labelIndexOfPrototype" rendered="true">
        <xp:this.value><![CDATA[#{javascript:// Prototype the indexOf function for JavaScript arrays
if (!Array.prototype.indexOf)
{
  Array.prototype.indexOf = function(elt /*, from*/)
  {
    var len = this.length;

    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0)
      from += len;

    for (; from < len; from++)
    {
      if (from in this &&
          this[from] === elt)
        return from;
    }
    return -1;
  };
}

return "";}]]></xp:this.value>
    </xp:label>

    <div class="xvwForm">
        <xe:formTable id="newForm" disableRequiredMarks="true"
            legend="New document form" ariaLabel="New document form">
            <xe:this.facets>
                <xp:panel xp:key="header">
                    <h2>
                        <xp:label
                            rendered="#{javascript: null == compositeData.documentId}"
                            id="titleNew" value="New Main Document">
                        </xp:label>
                        <xp:label
                            rendered="#{javascript: null != compositeData.documentId}"
                            id="titleEdit" value="Edit Document">
                        </xp:label>
                    </h2>
                </xp:panel>
            </xe:this.facets>
            <xe:formRow labelPosition="none">
                <xp:table style="width:99%" border="0" cellpadding="0"
                    role="presentation" cellspacing="0">
                    <xp:tr>
                        <xp:td style="width:10%;min-width:10%;">
                            <xp:label id="lblDocumentType"
                                value="Document type:" for="fieldDocType"
                                style="white-space:nowrap;">
                            </xp:label>
                        </xp:td>
                        <xp:td>
                            <xp:comboBox id="fieldDocType"
                            	value="#{document1.DocType}" style="width:100%;">
                            	<xp:this.defaultValue>
                            	   <![CDATA[#{javascript://
                            	        // Get the default document
                                        var missionView:NotesView = database.getView("MissionLookup");
                                        var missionNote = missionView.getDocumentByKey("Mission");
                                        var default1, default2, default3, default4;
                                        if(null != missionNote){
	                                        //Get the original default doc type values
	                                        default1 = missionNote.getItemValue("DefaultDocType1").elementAt(0);
	                                        default2 = missionNote.getItemValue("DefaultDocType2").elementAt(0);
	                                        default3 = missionNote.getItemValue("DefaultDocType3").elementAt(0);
	                                        default4 = missionNote.getItemValue("DefaultDocType4").elementAt(0);
                                        }
                                        
	                            	    if(isDiscussion(viewScope.controlDocType)){ 
								            return default1;
								        }else if(isActionItem(viewScope.controlDocType)) {
								            return default2;
								        }else if(isMeeting(viewScope.controlDocType)) {
								            return default3;
								        }else if(isReference(viewScope.controlDocType) ){
								            return default4;
								        }else{
								            return default1;
								        }
									}]]>
								</xp:this.defaultValue>
                            	<xp:selectItems id="selectItems1">
                            		<xp:this.value><![CDATA[#{javascript://
										// Get the default document
										var missionView:NotesView = database.getView("MissionLookup");
										var missionNote:NotesDocument = missionView.getDocumentByKey("Mission");
										var formDocType = "", default1, default2, default3, default4;
										var locale = context.getLocaleString();
										if(null != missionNote){
											formDocType = missionNote.getItemValue("DocType");
											//Get the original default doc type values
											default1 = missionNote.getItemValue("DefaultDocType1").elementAt(0);
											default2 = missionNote.getItemValue("DefaultDocType2").elementAt(0);
											default3 = missionNote.getItemValue("DefaultDocType3").elementAt(0);
											default4 = missionNote.getItemValue("DefaultDocType4").elementAt(0);
										}
										
										if(formDocType=="") {
											//Use default doc type "Discussion"
											formDocType = I18n.format(strings.getString("defaultdoctype1") + "|" + default1);
										}else{
											//This section makes sure the correct translation of the doc types is displayed to the user in the dropdown
											//Format = "translated_doctype|doctype"
											//translated_dcotype is displayed as the itemLabel in the dropdown
											//doctype is used as the itemValue
											if(formDocType.contains(default1)) {
												formDocType.setElementAt(strings.getString("defaultdoctype1") + "|" + default1, formDocType.indexOf(default1));
											}
											if(formDocType.contains(default2)) {
												formDocType.setElementAt(strings.getString("defaultdoctype2") + "|" + default2, formDocType.indexOf(default2));
											}
											if(formDocType.contains(default3)) {
												formDocType.setElementAt(strings.getString("defaultdoctype3") + "|" + default3, formDocType.indexOf(default3));
											}
											if(formDocType.contains(default4)) {
												formDocType.setElementAt(strings.getString("defaultdoctype4") + "|" + default4, formDocType.indexOf(default4));
											}
										}
										return formDocType;}]]>
									</xp:this.value>
                            	</xp:selectItems>
                            	<xp:eventHandler event="onchange"
                            		submit="true" refreshMode="partial"
                            		refreshId="divDocTypeRefresh"
                            		execMode="partial"
                            		disableValidators="true">
                            		<xp:this.action>
                            			<![CDATA[#{javascript://
		                                    // Get the combo box control
		                                    var controlDocType = getComponent("fieldDocType");
		                                    // Get the newly selected value
		                                    var docType = controlDocType.getSubmittedValue();
		                                    if( null == docType ){
		                                        docType = controlDocType.getValue();
		                                    }
		                                    
		                                    // convert any non-default doctype to "Discussion", because the discussion
		                                    // fields are used for custom doctypes
		                                    if(isDiscussion(docType)) {
		                                        docType = strings.defaultdoctype1;
		                                    }else if(isActionItem(docType)) {
		                                        docType = strings.defaultdoctype2;
		                                    }else if(isMeeting(docType)) {
		                                        docType = strings.defaultdoctype3;
		                                    }else if(isReference(docType)) {
		                                        docType = strings.defaultdoctype4;
		                                    }else{
		                                        docType = strings.defaultdoctype1;
		                                    }
		                                    // Put the newly selected value into the view scope
		                                    viewScope.controlDocType = docType;
                                        }]]>
                            		</xp:this.action>
                            	</xp:eventHandler>
                            </xp:comboBox>
                        </xp:td>
                    </xp:tr>
                </xp:table>
            </xe:formRow>
            <xe:formRow labelPosition="none">
                <xp:table style="width:99%" border="0" cellpadding="0"
                    role="presentation" cellspacing="0">
                    <xp:tr>
                        <xp:td style="width:10%;min-width:10%;">
                            <xp:label id="lblSubject" value="Subject:"
                                for="subjectField2">
                            </xp:label>
                        </xp:td>
                        <xp:td>
                            <xp:inputText id="subjectField2"
                                style="width:100%;" value="#{document1.Subject}" required="true"
                                disableClientSideValidation="false" autocomplete="off">
                                <xp:this.validators>
                                    <xp:validateRequired
                                        message="Please provide a subject">
                                    </xp:validateRequired>
                                </xp:this.validators>
                            </xp:inputText>
                        </xp:td>
                    </xp:tr>
                </xp:table>
            </xe:formRow>

            <xe:formRow labelPosition="none">
                <xp:span style="vertical-align:baseline;">
                    <xp:this.rendered><![CDATA[#{javascript://
                    viewScope.tagOptions = @DbColumn(@DbName(), 'MissionLookup', 4);
                    true;}]]>
                    </xp:this.rendered>

                    <xp:table style="width:99%" border="0"
                        role="presentation" cellpadding="0" cellspacing="0">
                        <xp:tr>
                            <xp:td style="width:10%;min-width:10%;">
                                <xp:label id="lblTags" value="Tags:">
                                </xp:label>
                            </xp:td>
                            <xp:td>
                                <xe:djextNameTextBox id="tagsField"
                                    styleClass="tagsField" multipleSeparator=","
                                    value="#{document1.Categories}" waiRole="button"
                                    title="Used to select tags">
                                </xe:djextNameTextBox>
                                <xe:valuePicker id="tagsPicker"
                                    pickerText="Select tags" for="tagsField" listWidth="300">
                                    <xe:this.dataProvider>
                                        <xe:simpleValuePicker
                                            caseInsensitive="true" labelSeparator=","
                                            valueListSeparator=","
                                            valueList="#{javascript:viewScope.tagOptions }">
                                        </xe:simpleValuePicker>
                                    </xe:this.dataProvider>
                                </xe:valuePicker>
                            </xp:td>
                        </xp:tr>
                    </xp:table>
                </xp:span>
            </xe:formRow>

            <xe:formRow labelPosition="none">
                <!-- The divDocTypeRefresh div gets refreshed on the fieldDocType combobox change event-->
                <xp:div id="divDocTypeRefresh">
                    <xp:section id="sectionReviewers"
                        disableTheme="true" headerStyle="text-decoration:none"
                        accesskey="R">

                        <!-- CMC 23/11/10 -->
                        <!-- The "Due Date" section  -->
                        <xp:this.header><![CDATA[#{javascript://
                        var docType = viewScope.controlDocType;
                        if (isDiscussion(docType))
                        {
                            return strings.sectionheader1;
                        }
                        else if (isActionItem(docType))
                        {
                            return strings.sectionheader2;
                        }
                        else if (isMeeting(docType))
                        {
                            return strings.sectionheader3;
                        }
                        else if (isReference(docType))
                        {
                            return strings.sectionheader4;
                        }
                        else
                        {
                            return strings.sectionheader1;
                        }
                        
                    }]]></xp:this.header>
                        <xp:this.initClosed><![CDATA[#{javascript:// open or close depending on docType selected
                            var docType = viewScope.controlDocType;
                            var div = getComponent("reviewersDiv");
                        
                            if (isDiscussion(docType))
                            {
                                div.style = "display:none;padding:10px;";
                                return true;
                            }
                            else if (isActionItem(docType))
                            {
                                div.style = "padding:10px;";
                                return false;
                            }
                            else if (isMeeting(docType))
                            {
                                div.style = "padding:10px;";
                                return false;
                            }
                            else if (isReference(docType))
                            {
                                div.style = "display:none;padding:10px;";
                                return true;
                            }
                            else
                            {
                                div.style = "display:none;padding:10px;";
                                return true;
                            }}]]>
                        </xp:this.initClosed>
                        <xp:eventHandler event="onclick" submit="true"
                            refreshMode="partial" refreshId="divDocTypeRefresh"
                            disableValidators="true">
                            <xp:this.action><![CDATA[#{javascript:                          
                                var div = getComponent("reviewersDiv");
                                var style = div.style;
                                if("" != style && style.indexOf("none") > -1) {
                                    div.style = "padding:10px;";
                                }else{
                                    div.style = "display:none;padding:10px;";
                                }}]]>
                            </xp:this.action>
                        </xp:eventHandler>
                        <xp:eventHandler event="onkeydown" submit="true"
                            refreshMode="partial" refreshId="divDocTypeRefresh"
                            disableValidators="true">
                            <xp:this.script><![CDATA[
                            var kc=thisEvent.keyCode?thisEvent.keyCode:thisEvent.which;
                            //Capture the key. If enter or space, pass-through to SSJS
                            if(kc==32 || kc==13){
                                return true;
                            }else{
                                return false;
                            }]]></xp:this.script>
                            <xp:this.action><![CDATA[#{javascript:
                                var div = getComponent("reviewersDiv");
                                var section = getComponent("sectionReviewers");
                                var style = div.style;
                                if("" != style && style.indexOf("none") > -1) {
                                    div.style = "padding:10px;";
                                    section.setClosed(false);
                                }else{
                                    div.style = "display:none;padding:10px;";
                                    section.setClosed(true);
                                }}]]>
                            </xp:this.action>
                        </xp:eventHandler>
                    </xp:section>
                    <xp:div id="reviewersDiv"
                        style="display:none;padding:10px">
                        <!--  TODO the xe:formTable control is not honoring the rendered property
                            on xe:formRow controls, nor on panels containing xe:formRow controls,
                            - need to fix that before can convert these reviewers areas to Form Tables -->

                        <!-- CMC 23/11/10 -->
                        <!-- The sectionDueDate displays when something other than "Meeting" is selected in the fieldDocType combobox -->
                        <xp:panel>
                            <xp:this.rendered><![CDATA[#{javascript:return (!isMeeting(viewScope.controlDocType));}]]></xp:this.rendered>
                            <xc:controlSectionDueDate
                                id="sectionDueDate">
                            </xc:controlSectionDueDate>
                        </xp:panel>

                        <!-- CMC 11/10/10 -->
                        <!-- The sectionActionItem displays when "Action Item" is selected in the fieldDocType combobox -->
                        <xp:panel>
                            <xp:this.rendered><![CDATA[#{javascript:isActionItem(viewScope.controlDocType);}]]></xp:this.rendered>
                            <xc:controlSectionActionItem
                                id="sectionActionItem">
                            </xc:controlSectionActionItem>
                        </xp:panel>

                        <!-- CMC 11/10/10 -->
                        <!-- The sectionMeeting displays when "Meeting" is selected in the fieldDocType combobox -->
                        <xp:panel>
                            <xp:this.rendered><![CDATA[#{javascript:return isMeeting(viewScope.controlDocType);}]]></xp:this.rendered>
                            <xc:controlSectionMeeting
                                id="sectionMeeting">
                            </xc:controlSectionMeeting>
                        </xp:panel>

                        <!-- CMC 23/11/10 -->
                        <!-- The "Reviewers" section  -->
                        <xc:controlSectionCombinedNames
                            id="sectionCombinedNames">
                        </xc:controlSectionCombinedNames>

                        <!-- CMC 23/11/10 -->
                        <!-- The review log -->
                        <xc:controlSectionReviewLog
                            id="sectionReviewLog">
                        </xc:controlSectionReviewLog>
                    </xp:div>
                </xp:div>
            </xe:formRow>
            <xe:formRow labelPosition="none">
                <xc:controlSectionShared id="sectionShared"></xc:controlSectionShared>
            </xe:formRow>

            <xe:formRow labelPosition="none">
                <xp:inputRichText value="#{document1.Body}"
                    style="width:99%;" title="text field for main content"
                    role="textbox">
                    <xp:this.dojoAttributes>
                        <xp:dojoAttribute name="toolbar"
                            loaded="${javascript:com.ibm.xsp.extlib.util.ExtLibUtil.isXPages852()}">
                            <xp:this.value><![CDATA[#{javascript:var customToolbar = "[['Font','FontSize'], \n" +
    "['Bold','Italic','Underline','Strike'], \n" +
    "['TextColor', 'BGColor'], \n" +
    "['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock', '-', 'NumberedList','BulletedList'], \n" +
    "['Outdent','Indent'], \n" +
    "['MenuPaste'], \n" +
    "['Find'], \n" +
    "['Image', 'Table', 'MenuLink', '-', 'Smiley']]";
return customToolbar;}]]></xp:this.value>
                        </xp:dojoAttribute>
                    </xp:this.dojoAttributes>
                </xp:inputRichText>
                <xc:controlAttachArea id="attachArea"
                    containerStyle="padding:5px;margin-bottom:1em"
                    valueEL="document1.Body">
                </xc:controlAttachArea>
            </xe:formRow>

            <xe:this.facets>
                <xp:panel xp:key="footer">
                    <xp:button value="Save" id="buttonSave">
                        <xp:eventHandler event="onclick" submit="true"
                            refreshMode="complete" id="evtSave">
                            <xp:this.action>
                                <xp:actionGroup>
                                    <xp:executeScript>
                                        <xp:this.script><![CDATA[#{javascript:
                                    // Presave calendar-only code to make sure duration data is calculated
if (view.getPageName().startsWith('/calendarEntry.xsp')) {
    // Compute the duration of the meeting from the start and end times
    try {
        var mtgTime1:com.ibm.xsp.component.xp.XspInputText = getComponent("mtgTime1");
        var mtgTime2:com.ibm.xsp.component.xp.XspInputText = getComponent("mtgTime2");
        
        var endTime:java.util.Date = mtgTime2.getValue();   
        var startTime:java.util.Date = mtgTime1.getValue();
        //print("++ " + endTime.getTime());
        //print("-- " + startTime.getTime());
        if (endTime != null && startTime != null) {
            var duration = ((endTime.getTime() - startTime.getTime()) / 60000);
            //println("duration = " + duration);
            // Should not happen as custom control has validator on EndDateTime field
            if (duration < 0) {
                duration = 60; // do not allow meetings with negative time
                // auto-fix to the meeting to be (a default) 1 hour from start time 
                var newEndTime:java.util.Date = new java.util.Date(startTime.getTime() + 3600000);
                document1.setValue("EndDateTime", newEndTime);
            }
            document1.setValue("Duration", duration);
        }
    } catch (e) {}
}}]]></xp:this.script>
                                    </xp:executeScript>
                                    <xp:saveDocument></xp:saveDocument>

                                    <xp:executeScript>
                                        <xp:this.script><![CDATA[#{javascript:if (view.getPageName().startsWith('/calendarEntry.xsp')) {
    context.redirectToPage("calendar.xsp");
}}]]></xp:this.script>
                                    </xp:executeScript>
                                    <xp:actionGroup>
                                        <xp:this.condition><![CDATA[#{javascript:
                                    var msgs = facesContext.getMessages(); 
                                    if( msgs && msgs.hasNext()) {
                                        // note, the save action can add errors, 
                                        // in which case the page should be redisplayed
                                        return false; 
                                    }
                                    // action to do next will depend on where this custom control is being used
                                    requestScope.isInTopicThread = view.getPageName().startsWith('/topicThread.xsp');
                                    return true;
                                }]]></xp:this.condition>
                                        <xp:actionGroup
                                            condition="#{javascript: !requestScope.isInTopicThread}">
                                            <!-- New Main Topic docs are created inline in the XPage, 
                                                not in the topicThread page, so do not move page when save/cancel a new doc 
                                            -->
                                            <xp:executeScript
                                                script="#{javascript: context.reloadPage() }">
                                            </xp:executeScript>
                                        </xp:actionGroup>
                                        <xp:actionGroup
                                            condition="#{javascript: requestScope.isInTopicThread}">
                                            <xp:executeScript>
                                                <xp:this.script><![CDATA[#{javascript://
                                            TopicThreadState.clearEditArea();
                                        TopicThreadState.reset();
                                        }]]></xp:this.script>
                                            </xp:executeScript>
                                        </xp:actionGroup>
                                    </xp:actionGroup>
                                </xp:actionGroup>
                            </xp:this.action>
                            <xp:this.script><![CDATA[
var meetingSection = document.getElementById("#{id:sectionMeeting}");
if(null != meetingSection){
    // get the values from the UI fields
    var dateControl = document.getElementById("#{id:mtgDate1}");
    var startTimeControl = document.getElementById("#{id:mtgTime1}");
    var endTimeControl = document.getElementById("#{id:mtgTime2}");

    // get the the hidden data-bound fields 
    var realMtgDateControl = document.getElementById("#{id:hiddenMtgDate}");
    var realMtgTimeControl = document.getElementById("#{id:hiddenMtgTime}");
    var realStartControl = document.getElementById("#{id:hiddenStartDateTime}");
    var realEndControl = document.getElementById("#{id:hiddenEndDateTime}");

    // calc a Date/Time value from the UI fields for the Domino items
    var dtString = dateControl.value + " " + startTimeControl.value;

    // set the data values for the bound fields
    realMtgDateControl.value = dtString;
    realMtgTimeControl.value = dtString;
    realStartControl.value = dtString;
    
    // calc the Date/Time value from the UI field for the Domino item
    dtString = dateControl.value + " " + endTimeControl.value;
    
    realEndControl.value = dtString;
}]]></xp:this.script>
                        </xp:eventHandler>
                    </xp:button>
                    <xp:span id="linkMarkPrivatePublicContainer"
                        style="padding-right:5px;">
                        <xp:link id="linkMarkPrivate"
                            text="Mark Private" style="zoom:1" role="button"
                            title="Mark document as private">
                            <xp:this.rendered><![CDATA[#{javascript:(userBean.accessLevel >= lotus.domino.ACL.LEVEL_AUTHOR) && userBean.canCreateDocs && document1.getItemValueString("readers") == ""}]]></xp:this.rendered>
                            <xp:eventHandler event="onclick"
                                submit="true" refreshMode="partial"
                                refreshId="linkMarkPrivatePublicContainer"
                                execId="linkMarkPrivatePublicContainer" execMode="partial"
                                disableValidators="true">
                                <xp:this.action>
                                    <![CDATA[#{javascript:document1.replaceItemValue("readers", [userBean.canonicalName, "LocalDomainServers"])}]]>
                                </xp:this.action>
                            </xp:eventHandler>
                        </xp:link>
                        <xp:link id="linkMarkPublic" text="Mark Public"
                            style="zoom:1" role="button" title="Mark document as public">
                            <xp:this.rendered><![CDATA[#{javascript:(userBean.accessLevel >= lotus.domino.ACL.LEVEL_AUTHOR) && userBean.canCreateDocs && document1.getItemValueString("readers") != ""}]]></xp:this.rendered>
                            <xp:eventHandler event="onclick"
                                submit="true" refreshMode="partial"
                                refreshId="linkMarkPrivatePublicContainer"
                                execId="linkMarkPrivatePublicContainer" execMode="partial"
                                disableValidators="true">
                                <xp:this.action>
                                    <![CDATA[#{javascript:document1.replaceItemValue("readers", "")}]]>
                                </xp:this.action>
                            </xp:eventHandler>
                        </xp:link>
                    </xp:span>
                    <xp:link id="linkCancel" text="Cancel"
                        style="zoom:1" themeId="Link.action" role="button"
                        title="cancel creating document">
                        <xp:eventHandler event="onclick" submit="true"
                            refreshMode="complete" immediate="true" execMode="partial">
                            <xp:this.action>
                                <xp:actionGroup>
                                    <xp:confirm
                                        message="#{strings.cancel_editing}">
                                    </xp:confirm>
                                    <xp:executeScript>
                                        <xp:this.script><![CDATA[#{javascript:if (view.getPageName().startsWith('/calendarEntry.xsp')) {
    context.redirectToPage("calendar.xsp");
}}]]></xp:this.script>
                                    </xp:executeScript>
                                    <xp:actionGroup>
                                        <xp:this.condition><![CDATA[#{javascript:
                                    // action to do next will depend on where this custom control is being used
                                    requestScope.isInTopicThread = view.getPageName().startsWith('/topicThread.xsp');
                                    return true;
                                }]]></xp:this.condition>
                                        <xp:actionGroup
                                            condition="#{javascript: !requestScope.isInTopicThread}">
                                            <!-- New Main Topic docs are created inline in the XPage, 
                                                not in the topicThread page, so do not move page when save/cancel a new doc 
                                            -->
                                            <xp:executeScript
                                                script="#{javascript: context.reloadPage() }">
                                            </xp:executeScript>
                                        </xp:actionGroup>
                                        <xp:actionGroup
                                            condition="#{javascript: requestScope.isInTopicThread}">
                                            <xp:executeScript>
                                                <xp:this.script><![CDATA[#{javascript://
                                        TopicThreadState.clearEditArea();
                                        TopicThreadState.reset();
                                    }]]></xp:this.script>
                                            </xp:executeScript>
                                        </xp:actionGroup>
                                    </xp:actionGroup>

                                </xp:actionGroup>
                            </xp:this.action>
                        </xp:eventHandler>
                    </xp:link>
                </xp:panel>
            </xe:this.facets>
        </xe:formTable>
    </div>
    <xp:eventHandler event="onClientLoad" submit="false">
        <xp:this.script><![CDATA[try{
    var x = document.getElementById("#{id:sectionReviewers}" + "_lk_close");
    if(null != x){
        x.setAttribute("role", "link");
        x.setAttribute("wairole", "link");
    }
    var y = document.getElementById("#{id:sectionReviewers}" + "_lk_open");
    if(null != y){
        y.setAttribute("role", "link");
        y.setAttribute("wairole", "link");
    }
    var xx = document.getElementById("#{id:sectionMoreOptions}" + "_lk_close");
    if(null != xx){
        xx.setAttribute("role", "link");
        xx.setAttribute("wairole", "link");
    }
    var yy = document.getElementById("#{id:sectionMoreOptions}" + "_lk_open");
    if(null != yy){
        yy.setAttribute("role", "link");
        yy.setAttribute("wairole", "link");
    }
}catch(e){
    //console.log("e: " + e);
}]]></xp:this.script>
    </xp:eventHandler>
</xp:view>
